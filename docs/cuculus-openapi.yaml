openapi: 3.0.0
paths:
  /v0/system/settings:
    get:
      operationId: getSystemSettings
      summary: システムの設定を返却する
      parameters: []
      responses:
        '200':
          description: システム設定情報
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemSettings'
  /v0/users/me:
    get:
      operationId: getMe
      summary: 自身の情報を返す
      parameters: []
      responses:
        '200':
          description: ログインしてるユーザー情報
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: JWTが無効、または期限切れ
        '404':
          description: ユーザーが見つかりませんでした。
      tags:
        - users
      security:
        - bearer: []
  /v0/users/by/username/{username}:
    get:
      operationId: getUserByUsername
      summary: ユーザー名からユーザーを取得する
      parameters:
        - name: username
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ユーザー情報
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithFollows'
        '404':
          description: ユーザーが見つかりませんでした。
      tags:
        - users
  /v0/users/{id}:
    get:
      operationId: getUserById
      summary: ユーザーIDからユーザーを取得する
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ユーザー情報
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithFollows'
        '404':
          description: ユーザーが見つかりませんでした。
      tags:
        - users
  /v0/users/{id}/posts:
    get:
      operationId: getUserPosts
      summary: ユーザーIDから投稿を取得する
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
        - name: max_id
          required: false
          in: query
          example: '26439435541307392'
          description: このIDを上限として、より小さいIDの投稿を取得します。
          schema:
            type: string
        - name: since_id
          required: false
          in: query
          example: '26439435541307392'
          description: このIDを下限として、より大きいIDの投稿を取得します。(min_idと併用不可)
          schema:
            type: string
        - name: min_id
          required: false
          in: query
          example: '26439435541307392'
          description: このIDを下限として、直後からの投稿を取得します。(since_idと併用不可)
          schema:
            type: string
        - name: limit
          required: false
          in: query
          example: 20
          description: 取得件数
          schema:
            minimum: 1
            maximum: 40
            default: 20
            type: number
      responses:
        '200':
          description: 投稿一覧
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPost'
        '400':
          description: min_idとsince_idは同時に指定できません
        '404':
          description: ユーザーが見つかりませんでした。
      tags:
        - users
      security:
        - {}
        - bearer: []
  /v0/users/{id}/followers:
    get:
      operationId: getUserFollowers
      summary: ユーザーIDからフォロワーを取得する
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: フォロワー一覧
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: ユーザーが見つかりませんでした。
      tags:
        - users
      security:
        - {}
        - bearer: []
  /v0/users/{id}/following:
    get:
      operationId: getUserFollowing
      summary: ユーザーIDからフォローを取得する
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: フォロー一覧
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: ユーザーが見つかりませんでした。
      tags:
        - users
      security:
        - {}
        - bearer: []
  /v0/users/{id}/follow:
    post:
      operationId: createFollow
      summary: ユーザーIDをフォローする
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '201':
          description: ''
        '404':
          description: ユーザーが見つかりませんでした。
      tags:
        - users
      security:
        - bearer: []
    delete:
      operationId: deleteFollow
      summary: ユーザーIDをフォロー解除する
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
        '404':
          description: ユーザーが見つかりませんでした。
      tags:
        - users
      security:
        - bearer: []
  /v0/auth/pre-sign-up:
    post:
      operationId: postPreSignUp
      summary: 仮登録API
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreUserRequest'
      responses:
        '201':
          description: 仮登録成功。認証コードをメールで送信します。
        '409':
          description: 既に登録済みのユーザー
      tags:
        - auth
  /v0/auth/pre-sign-up/verify-code:
    post:
      operationId: postPreSignUpVerifyCode
      summary: 認証コードの確認
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyCodeRequest'
      responses:
        '200':
          description: 認証OK
        '400':
          description: 認証コードが違います。
        '403':
          description: 認証コードを間違えすぎた。
        '404':
          description: ユーザーが見つかりませんでした。
      tags:
        - auth
  /v0/auth/sign-up:
    post:
      operationId: postSignUp
      summary: 本登録API
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: アカウント作成成功。
          headers:
            Set-Cookie:
              description: auth_tokenを返却します。
              schema:
                type: string
                example: >-
                  auth_token=abcde12345; Domain=.localhost; Path=/; HttpOnly;
                  Secure;
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '400':
          description: 認証コードが違います。
        '403':
          description: 認証コードを間違えすぎた。
        '404':
          description: ユーザーが見つかりませんでした。
        '409':
          description: 既に登録済みもしくは使用済みのID
      tags:
        - auth
  /v0/auth/sign-in:
    post:
      operationId: postSignIn
      summary: ログインAPI
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: web用にauth_tokenはset-cookieでも返却します。
          headers:
            Set-Cookie:
              description: auth_tokenを返却します。
              schema:
                type: string
                example: >-
                  auth_token=abcde12345; Domain=.localhost; Path=/; HttpOnly;
                  Secure;
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '400':
          description: ユーザー名またはパスワードが間違っている。
      tags:
        - auth
  /v0/auth/token/refresh:
    post:
      operationId: postTokenRefresh
      summary: アクセストークンの再発行(現在はCookieのみ対応)
      parameters: []
      responses:
        '201':
          description: 発行されたアクセストークン
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '401':
          description: auth_tokenが無効、または期限切れ
      tags:
        - auth
      security:
        - cookie: []
  /v0/auth/sign-out:
    post:
      operationId: postSignOut
      summary: ログアウトAPI
      parameters: []
      responses:
        '200':
          description: ログアウト成功
      tags:
        - auth
      security:
        - cookie: []
  /health:
    get:
      operationId: HealthController_check
      parameters: []
      responses:
        '200':
          description: The Health Check is successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  info:
                    type: object
                    example:
                      database:
                        status: up
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  error:
                    type: object
                    example: {}
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  details:
                    type: object
                    example:
                      database:
                        status: up
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
        '503':
          description: The Health Check is not successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  info:
                    type: object
                    example:
                      database:
                        status: up
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  error:
                    type: object
                    example:
                      redis:
                        status: down
                        message: Could not connect
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
                    nullable: true
                  details:
                    type: object
                    example:
                      database:
                        status: up
                      redis:
                        status: down
                        message: Could not connect
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                      additionalProperties:
                        type: string
  /v0/posts:
    post:
      operationId: createPost
      summary: 引用ポスト、ポスト、リプライに対応(予定)
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePost'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPost'
        '401':
          description: ''
      tags:
        - posts
      security:
        - bearer: []
  /v0/posts/{id}:
    get:
      operationId: getPost
      summary: ポストIDからポストを取得する(認証は任意)
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ポスト情報
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPost'
        '404':
          description: 投稿が見つかりませんでした。
      tags:
        - posts
      security:
        - {}
        - bearer: []
    delete:
      operationId: deletePost
      summary: Postの削除
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '404':
          description: 投稿が見つかりませんでした。
      tags:
        - posts
      security:
        - bearer: []
  /v0/posts/{id}/reposted_by:
    get:
      operationId: getRepostedBy
      summary: ポストIDからリポストしたアカウント一覧を返す
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: ''
      tags:
        - posts
      security:
        - {}
        - bearer: []
  /v0/posts/{id}/favorited_by:
    get:
      operationId: getFavoritedBy
      summary: ポストIDからお気に入りしたアカウント一覧を返す
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: ''
      tags:
        - posts
      security:
        - {}
        - bearer: []
  /v0/posts/{id}/favorite:
    post:
      operationId: createFavorite
      summary: お気に入り登録
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPost'
        '401':
          description: ''
        '404':
          description: ''
      tags:
        - posts
      security:
        - bearer: []
    delete:
      operationId: deleteFavorite
      summary: お気に入り登録解除
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPost'
        '401':
          description: ''
        '404':
          description: ''
      tags:
        - posts
      security:
        - bearer: []
  /v0/posts/{id}/repost:
    post:
      operationId: createRepost
      summary: リポスト
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPost'
        '401':
          description: ''
        '404':
          description: ''
      tags:
        - posts
      security:
        - bearer: []
    delete:
      operationId: deleteRepost
      summary: リポスト解除
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPost'
        '401':
          description: ''
        '404':
          description: ''
      tags:
        - posts
      security:
        - bearer: []
  /v0/timelines/home:
    get:
      operationId: getHomeTimeline
      summary: ホームタイムラインの取得
      parameters:
        - name: max_id
          required: false
          in: query
          example: '26439435541307392'
          description: このIDを上限として、より小さいIDの投稿を取得します。
          schema:
            type: string
        - name: since_id
          required: false
          in: query
          example: '26439435541307392'
          description: このIDを下限として、より大きいIDの投稿を取得します。(min_idと併用不可)
          schema:
            type: string
        - name: min_id
          required: false
          in: query
          example: '26439435541307392'
          description: このIDを下限として、直後からの投稿を取得します。(since_idと併用不可)
          schema:
            type: string
        - name: limit
          required: false
          in: query
          example: 20
          description: 取得件数
          schema:
            minimum: 1
            maximum: 40
            default: 20
            type: number
      responses:
        '200':
          description: ポスト一覧
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPost'
        '400':
          description: min_idとsince_idは同時に指定できません
      tags:
        - timelines
      security:
        - bearer: []
  /v0/timelines/public:
    get:
      operationId: getPublicTimeline
      summary: 全体タイムラインの取得(廃止予定)
      parameters:
        - name: max_id
          required: false
          in: query
          example: '26439435541307392'
          description: このIDを上限として、より小さいIDの投稿を取得します。
          schema:
            type: string
        - name: since_id
          required: false
          in: query
          example: '26439435541307392'
          description: このIDを下限として、より大きいIDの投稿を取得します。(min_idと併用不可)
          schema:
            type: string
        - name: min_id
          required: false
          in: query
          example: '26439435541307392'
          description: このIDを下限として、直後からの投稿を取得します。(since_idと併用不可)
          schema:
            type: string
        - name: limit
          required: false
          in: query
          example: 20
          description: 取得件数
          schema:
            minimum: 1
            maximum: 40
            default: 20
            type: number
      responses:
        '200':
          description: ポスト一覧
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserPost'
        '400':
          description: min_idとsince_idは同時に指定できません
      tags:
        - timelines
      security:
        - {}
        - bearer: []
  /v0/invitations/verify-code:
    post:
      operationId: postInvitationVerifyCode
      summary: 招待コードの確認
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationCodeRequest'
      responses:
        '200':
          description: 招待コードOK
        '400':
          description: 招待コードが無効です。
      tags:
        - invitations
  /v0/invitations/me:
    get:
      operationId: getInvitationsMe
      summary: 自分が発行した招待コード一覧
      parameters: []
      responses:
        '200':
          description: 招待コード一覧
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInvitations'
        '401':
          description: 認証エラー
      tags:
        - invitations
      security:
        - bearer: []
  /v0/invitations/create:
    post:
      operationId: postInvitationsCreate
      summary: 招待コードの発行
      parameters: []
      responses:
        '200':
          description: 招待コード発行
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
        '400':
          description: 招待コードの発行に失敗しました。
        '401':
          description: 認証エラー
      tags:
        - invitations
      security:
        - bearer: []
  /v0/accounts/update-profile:
    post:
      operationId: updateProfile
      summary: プロフィール更新
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfile'
      responses:
        '200':
          description: プロフィールの更新に成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithFollows'
        '401':
          description: JWTが無効、または期限切れ
      tags:
        - accounts
      security:
        - bearer: []
  /v0/accounts/update-profile-image:
    post:
      operationId: updateProfileImage
      summary: プロフィール画像変更
      parameters: []
      requestBody:
        required: true
        description: Upload File
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: プロフィール画像の更新に成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithFollows'
        '401':
          description: JWTが無効、または期限切れ
      tags:
        - accounts
      security:
        - bearer: []
  /v0/accounts/update-profile-background-image:
    post:
      operationId: updateProfileBackgroundImage
      summary: ヘッダー画像更新
      parameters: []
      requestBody:
        required: true
        description: Upload File
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '401':
          description: JWTが無効、または期限切れ
      tags:
        - accounts
      security:
        - bearer: []
info:
  title: Cuculus API
  description: The Cuculus API description
  version: 0.0.1
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
    cookie:
      type: apiKey
      in: cookie
      name: auth_token
  schemas:
    SystemSettings:
      type: object
      properties:
        invitation_only:
          type: boolean
          description: 招待制ON/OFF
        maintenance:
          type: boolean
          description: メンテナンス中
      required:
        - invitation_only
        - maintenance
    User:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        username:
          type: string
        created_at:
          format: date-time
          type: string
        bio:
          type: string
        profile_image_url:
          type: string
        protected:
          type: boolean
        url:
          type: string
        verified:
          type: boolean
      required:
        - id
        - name
        - username
        - created_at
        - bio
        - profile_image_url
        - protected
        - url
        - verified
    UserWithFollows:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        username:
          type: string
        created_at:
          format: date-time
          type: string
        bio:
          type: string
        profile_image_url:
          type: string
        protected:
          type: boolean
        url:
          type: string
        verified:
          type: boolean
        followers_count:
          type: number
          description: フォロワー数
          example: 100
        following_count:
          type: number
          description: フォロー数
          example: 100
      required:
        - id
        - name
        - username
        - created_at
        - bio
        - profile_image_url
        - protected
        - url
        - verified
    Post:
      type: object
      properties:
        id:
          type: string
          description: 投稿ID
          example: '26439435541307392'
        original_post_id:
          type: string
          description: リポスト|引用元ID|オリジナルには含まれません。
          example: '26439435541307392'
        reply_to_post_id:
          type: string
          description: リプライ先ID|リプライでない場合は含まれません。
        author:
          $ref: '#/components/schemas/User'
        text:
          type: string
          description: 本文|空orNullの場合はRTです。
        posted_at:
          format: date-time
          type: string
      required:
        - id
        - author
        - posted_at
    UserPost:
      type: object
      properties:
        id:
          type: string
          description: 投稿ID
          example: '26439435541307392'
        original_post_id:
          type: string
          description: リポスト|引用元ID|オリジナルには含まれません。
          example: '26439435541307392'
        reply_to_post_id:
          type: string
          description: リプライ先ID|リプライでない場合は含まれません。
        author:
          $ref: '#/components/schemas/User'
        text:
          type: string
          description: 本文|空orNullの場合はRTです。
        posted_at:
          format: date-time
          type: string
        original_post:
          description: リポスト元
          allOf:
            - $ref: '#/components/schemas/Post'
        reposted:
          type: boolean
          description: リポスト済み
        repost_count:
          type: number
          description: リポスト数
        favorited:
          type: boolean
          description: お気に入り登録済み
        favorite_count:
          type: number
          description: お気に入り数
      required:
        - id
        - author
        - posted_at
        - reposted
        - repost_count
        - favorited
        - favorite_count
    PreUserRequest:
      type: object
      properties:
        name:
          type: string
          description: 表示名
          example: ククルス
        email:
          type: string
          description: メールアドレス
          example: cuculus@example.com
      required:
        - name
        - email
    VerifyCodeRequest:
      type: object
      properties:
        email:
          type: string
          description: メールアドレス
          example: cuculus@example.com
        code:
          type: string
          description: 認証コード
          example: '012345'
      required:
        - email
        - code
    UserRequest:
      type: object
      properties:
        email:
          type: string
          description: メールアドレス
          example: cuculus@example.com
        code:
          type: string
          description: 認証コード
          example: '012345'
        username:
          type: string
          description: ユーザーID
          example: cuculus
        password:
          type: string
          description: パスワード
          example: password
        invitation_code:
          type: string
          description: 招待コード
          example: ABCDE12345
      required:
        - email
        - code
        - username
        - password
    AuthToken:
      type: object
      properties:
        access_token:
          type: string
        auth_token:
          type: string
        expires_at:
          format: date-time
          type: string
          description: auth_tokenの有効期限
          example: '2023-12-31T23:59:59.999Z'
      required:
        - access_token
        - auth_token
    LoginRequest:
      type: object
      properties:
        username:
          type: string
          description: ユーザーID
          example: cuculus
        password:
          type: string
          description: パスワード
          example: password
      required:
        - username
        - password
    AccessToken:
      type: object
      properties:
        access_token:
          type: string
      required:
        - access_token
    CreatePost:
      type: object
      properties:
        original_post_id:
          type: string
          description: 引用元ID
          example: '26439435541307392'
        text:
          type: string
          description: 本文
          example: Hello, World!
    InvitationCodeRequest:
      type: object
      properties:
        invitation_code:
          type: string
          description: 招待コード
          example: ABCDE12345
      required:
        - invitation_code
    Invitation:
      type: object
      properties:
        code:
          type: string
          description: 招待コード
          example: ABCDE12345
        issued_at:
          format: date-time
          type: string
          description: 招待コードの発行日時
          example: '2021-01-01T00:00:00.000Z'
        used_at:
          format: date-time
          type: string
          description: 招待コードの使用日時
          example: '2021-01-01T00:00:00.000Z'
      required:
        - code
        - issued_at
    UserInvitations:
      type: object
      properties:
        remaining_invitations:
          type: number
          description: 発行できる招待コードの残数
          example: 10
        invitations:
          description: 自分が発行した招待コード一覧
          type: array
          items:
            $ref: '#/components/schemas/Invitation'
      required:
        - remaining_invitations
        - invitations
    UpdateProfile:
      type: object
      properties:
        name:
          type: string
          description: 表示名
          example: ククルス
        bio:
          type: object
          description: bio
          example: ククルスへようこそ。
